name: CI/CD Pipeline

on:
  push:
    branches:
      - main      # Rodar o workflow quando houver push na branch main
  pull_request:
    branches:
      - main      # Rodar o workflow para pull requests na branch main

jobs:
  # Job para rodar os testes
  test:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: --health-cmd="curl --silent --fail localhost:27017 || exit 1" --health-timeout=3s --health-start-period=10s --health-interval=5s

    steps:
    - name: Check out code
      uses: actions/checkout@v2
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      
    - name: Build and run Docker container for tests
      run: |
        docker-compose -f docker-compose.yml up -d # Inicia o Docker Compose com os serviços (API e MongoDB)
        docker-compose exec api npm install       # Instala as dependências
        docker-compose exec api npm test         # Roda os testes da aplicação

    - name: Shut down Docker containers
      run: docker-compose down # Desliga os containers após os testes

  # Job para deploy (se necessário)
  deploy:
    runs-on: ubuntu-latest
    needs: test  # O deploy só ocorrerá se os testes passarem
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Deploy to your server (Exemplo para deploy via SSH)
      run: |
        echo "Realizando deploy..."
        # Adicione aqui o código de deploy para seu servidor, como comandos SSH ou scripts
        # Para um deploy usando Docker, você pode rodar os comandos docker-compose para subir os containers no servidor
